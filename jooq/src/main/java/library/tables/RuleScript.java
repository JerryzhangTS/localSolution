/**
 * This class is generated by jOOQ
 */
package library.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import library.Invoice;
import library.Keys;
import library.tables.records.RuleScriptRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RuleScript extends TableImpl<RuleScriptRecord> {

    private static final long serialVersionUID = 113343470;

    /**
     * The reference instance of <code>invoice.rule_script</code>
     */
    public static final RuleScript RULE_SCRIPT = new RuleScript();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RuleScriptRecord> getRecordType() {
        return RuleScriptRecord.class;
    }

    /**
     * The column <code>invoice.rule_script.rule_id</code>.
     */
    public final TableField<RuleScriptRecord, String> RULE_ID = createField("rule_id", org.jooq.impl.SQLDataType.VARCHAR.length(36).nullable(false), this, "");

    /**
     * The column <code>invoice.rule_script.expression</code>.
     */
    public final TableField<RuleScriptRecord, String> EXPRESSION = createField("expression", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>invoice.rule_script</code> table reference
     */
    public RuleScript() {
        this("rule_script", null);
    }

    /**
     * Create an aliased <code>invoice.rule_script</code> table reference
     */
    public RuleScript(String alias) {
        this(alias, RULE_SCRIPT);
    }

    private RuleScript(String alias, Table<RuleScriptRecord> aliased) {
        this(alias, aliased, null);
    }

    private RuleScript(String alias, Table<RuleScriptRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Invoice.INVOICE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RuleScriptRecord> getPrimaryKey() {
        return Keys.KEY_RULE_SCRIPT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RuleScriptRecord>> getKeys() {
        return Arrays.<UniqueKey<RuleScriptRecord>>asList(Keys.KEY_RULE_SCRIPT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<RuleScriptRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RuleScriptRecord, ?>>asList(Keys.FK_SCRIPT_RULE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RuleScript as(String alias) {
        return new RuleScript(alias, this);
    }

    /**
     * Rename this table
     */
    public RuleScript rename(String name) {
        return new RuleScript(name, null);
    }
}
